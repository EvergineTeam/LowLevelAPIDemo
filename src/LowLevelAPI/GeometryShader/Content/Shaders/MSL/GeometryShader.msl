#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_Globals
{
    float4x4 worldViewProj;
};

struct GS_IN
{
    float4 pos;
    float4 col;
};

struct GS_out
{
    float4 out_var_COLOR;
    float4 gl_Position;
};

struct GS_in
{
    float4 in_var_COLOR_0;
    float4 in_var_COLOR_1;
    float4 in_var_COLOR_2;
};

template<typename T, uint A>
inline void spvArrayCopyFromConstantToStack1(thread T (&dst)[A], constant T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromConstantToThreadGroup1(threadgroup T (&dst)[A], constant T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromStackToStack1(thread T (&dst)[A], thread const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromStackToThreadGroup1(threadgroup T (&dst)[A], thread const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromThreadGroupToStack1(thread T (&dst)[A], threadgroup const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

template<typename T, uint A>
inline void spvArrayCopyFromThreadGroupToThreadGroup1(threadgroup T (&dst)[A], threadgroup const T (&src)[A])
{
    for (uint i = 0; i < A; i++)
    {
        dst[i] = src[i];
    }
}

unknown GS_out GS(GS_in in [[stage_in]], constant type_Globals& _Globals [[buffer(0)]])
{
    GS_out out = {};
    float4 in_var_COLOR[3] = {};
    in_var_COLOR[0] = in.in_var_COLOR_0;
    in_var_COLOR[1] = in.in_var_COLOR_1;
    in_var_COLOR[2] = in.in_var_COLOR_2;
    GS_IN _45[3] = { GS_IN{ gl_Position[0], in_var_COLOR[0] }, GS_IN{ gl_Position[1], in_var_COLOR[1] }, GS_IN{ gl_Position[2], in_var_COLOR[2] } };
    GS_IN param_var_input[3];
    spvArrayCopyFromStackToStack1(param_var_input, _45);
    for (int _47 = 0; _47 < 3; )
    {
        out.gl_Position = _Globals.worldViewProj * param_var_input[_47].pos;
        out.out_var_COLOR = param_var_input[_47].col;
        EmitVertex();
        _47++;
        continue;
    }
    EndPrimitive();
    int _60;
    _60 = 1;
    for (; _60 <= 10; _60++)
    {
        for (int _67 = 0; _67 < 3; )
        {
            out.gl_Position = _Globals.worldViewProj * (param_var_input[_67].pos + float4(0.0, float(_60) * 0.100000001490116119384765625, 0.0, 0.0));
            out.out_var_COLOR = param_var_input[_67].col;
            EmitVertex();
            _67++;
            continue;
        }
        EndPrimitive();
    }
    return out;
}

